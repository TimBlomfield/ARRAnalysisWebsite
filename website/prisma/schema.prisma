// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  USER
}

model RegistrationLink {
  id            Int      @id @default(autoincrement())
  token         String   @unique
  email         String
  role          Role     @default(USER)
  // @Begin {{ Role: User }}
  licenseId     BigInt?
  firstName     String?
  lastName      String?
  customerEmail String?
  // @End {{ Role: User }}
  createdAt     DateTime @default(now())
  expiresAt     DateTime
}

model Administrator {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id_UserData Int      @unique
  data        UserData @relation(fields: [id_UserData], references: [id], onDelete: Cascade)
}

model Customer {
  id                Int      @id @default(autoincrement())
  id_stripeCustomer String   @unique
  users             User[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  id_UserData Int      @unique
  data        UserData @relation(fields: [id_UserData], references: [id], onDelete: Cascade)
}

model User {
  id         Int      @id @default(autoincrement())
  licenseIds BigInt[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  id_UserData Int       @unique
  data        UserData  @relation(fields: [id_UserData], references: [id], onDelete: Cascade)
  id_Customer Int?
  customer    Customer? @relation(fields: [id_Customer], references: [id], onDelete: SetNull)
}

model UserData {
  id             Int      @id @default(autoincrement())
  firstName      String   @default("")
  lastName       String   @default("")
  phone          String   @default("")
  company        String   @default("")
  email          String   @unique
  hashedPassword String
  jobTitle       String   @default("")
  address        String   @default("")
  street1        String   @default("")
  street2        String   @default("")
  street3        String   @default("")
  city           String   @default("")
  state          String   @default("")
  postalCode     String   @default("")
  country        String   @default("")
  secret         String   @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Optional relations
  admin    Administrator?
  customer Customer?
  user     User?
}

enum AuditEvent {
  LOGIN
  LOGOUT
  CREATE_SUBSCRIPTION
  PAYMENT_SUCCESS_PAGE
  ADMIN_REGISTERED
  USER_REGISTERED
  SEND_USER_EMAIL_INVITE
  ALLOW_SELF_FOR_LICENSE
  DISALLOW_USER_FOR_LICENSE
  DELETE_USER
  ENABLE_DISABLE_LICENSE
  ASSIGN_USER_TO_LICENSE
}

model AuditLog {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  actorEmail  String
  eventType   AuditEvent
  ipAddress   String?
  userAgent   String?
  description String?
  changes     AuditLogChange[]
  metadata    AuditLogMetadata[]

  @@index([createdAt])
  @@index([actorEmail])
  @@index([eventType])
}

model AuditLogChange {
  id        Int     @id @default(autoincrement())
  fieldName String
  oldValue  String?
  newValue  String?

  id_AuditLog Int
  auditLog    AuditLog @relation(fields: [id_AuditLog], references: [id], onDelete: Cascade)

  @@index([id_AuditLog])
}

model AuditLogMetadata {
  id    Int    @id @default(autoincrement())
  key   String
  value String

  id_AuditLog Int
  auditLog    AuditLog @relation(fields: [id_AuditLog], references: [id], onDelete: Cascade)

  @@index([id_AuditLog])
}
